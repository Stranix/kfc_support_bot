import logging

from aiogram import Router
from aiogram import html
from aiogram import types
from aiogram.filters import Command
from django.utils import timezone

from src.models import Employee
from src.models import WorkShift

logger = logging.getLogger('support_bot')
router = Router(name='end_shift_handlers')


@router.message(Command('end_shift'))
async def end_shift(message: types.Message, employee: Employee):
    logger.info('–°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã')
    try:
        work_shift = await employee.work_shifts.aget(
            shift_start_at__isnull=False,
            shift_end_at__isnull=True,
        )
    except WorkShift.DoesNotExist:
        logger.warning('–ù–µ –Ω–∞—à–µ–ª –æ—Ç–∫—Ä—ã—Ç—É—é —Å–º–µ–Ω—É —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await message.answer(
            '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã.'
            '–°–Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—É –Ω–∞–¥–æ –Ω–∞—á–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /on_shift'
        )
        return
    logger.debug('employee: %s', employee)
    logger.debug('work_shift: %s', work_shift)

    logger.debug('–§–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –≤ –ë–î')
    work_shift.shift_end_at = timezone.now()
    work_shift.is_works = False
    await work_shift.asave()
    await message.answer('–°–º–µ–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü–æ–∫–∞ üëã')

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É')
    for manager in employee.managers.all():
        await message.bot.send_message(
            manager.tg_id,
            f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {html.code(employee.name)}\n–ó–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É',
        )
