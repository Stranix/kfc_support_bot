import logging

from aiogram import Router
from aiogram import types
from aiogram import html
from aiogram.filters import Command
from aiogram.fsm.state import State
from aiogram.fsm.state import StatesGroup

from django.utils import timezone

from src.models import WorkShift
from src.models import BreakShift
from src.models import CustomUser
from src.bot.utils import send_notify
from src.bot.utils import get_employee_managers

logger = logging.getLogger('support_bot')
router = Router(name='break_shift_handlers')


class WorkShiftBreakState(StatesGroup):
    break_status: State()


@router.message(Command('break_start'))
async def start_break_shift(message: types.Message, employee: CustomUser):
    try:
        work_shift = await employee.new_work_shifts.aget(
            shift_start_at__isnull=False,
            shift_end_at__isnull=True,
        )
    except WorkShift.DoesNotExist:
        logger.warning('–ù–µ –Ω–∞—à–µ–ª –æ—Ç–∫—Ä—ã—Ç—É—é —Å–º–µ–Ω—É —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await message.answer(
            '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã.'
            '–°–Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—É –Ω–∞–¥–æ –Ω–∞—á–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /on_shift'
        )
        return
    logger.debug('–§–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä—ã–≤ –≤ –ë–î')
    if not work_shift.is_works:
        await message.answer('–ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.')
        return
    await work_shift.break_shift.acreate(new_employee=employee)
    work_shift.is_works = False
    await work_shift.asave()

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    await message.answer('–í–∞—à –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞—Ç')

    managers = await get_employee_managers(employee)
    await send_notify(
        managers,
        f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {html.code(employee.name)}\n–£—à–µ–ª –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤',
    )


@router.message(Command('break_stop'))
async def stop_break_shift(message: types.Message, employee: CustomUser):
    try:
        work_shift = await employee.new_work_shifts.aget(
            shift_start_at__isnull=False,
            shift_end_at__isnull=True,
        )
    except WorkShift.DoesNotExist:
        logger.warning('–ù–µ –Ω–∞—à–µ–ª –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤')
        await message.answer(
            '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞'
            '–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞–¥–æ –Ω–∞—á–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: /break_start'
        )
        return
    logger.debug('–§–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –ë–î')
    try:
        active_break = await work_shift.break_shift.select_related(
            'new_employee'
        ).aget(is_active=True)
    except BreakShift.DoesNotExist:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ ü§∑‚Äç‚ôÇ')
        return
    active_break.end_break_at = timezone.now()
    active_break.is_active = False
    work_shift.is_works = True
    await active_break.asave()
    await work_shift.asave()

    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    await message.answer('–í–∞—à –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω')
    managers = await get_employee_managers(employee)
    await send_notify(
        managers,
        f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {html.code(employee.name)}\n–ó–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–µ—Ä—ã–≤',
    )
