import logging
import re

import aiogram.utils.markdown as md

from aiogram import F
from aiogram import Router
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.state import State
from aiogram.fsm.state import StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from asgiref.sync import sync_to_async
from django.utils import timezone

from src.models import Task
from src.models import Employee
from src.bot.keyboards import create_tg_keyboard_markup
from src.bot.keyboards import get_support_task_keyboard
from src.bot.keyboards import get_task_feedback_keyboard


logger = logging.getLogger('support_bot')
router = Router(name='support_task_handlers')


class TaskState(StatesGroup):
    show_info = State()
    close_task = State()


@router.message(Command('get_task'))
async def gel_task(message: types.Message, state: FSMContext):
    logger.info('–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á')
    tasks = await sync_to_async(list)(
        Task.objects.filter(
            status='NEW',
            number__istartswith='sd',
        )
    )
    if not tasks:
        logger.warning('–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á')
        await message.answer('–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á ü•π')
        return
    tasks_numbers = [task.number for task in tasks]
    tasks_keyboard = await create_tg_keyboard_markup(tasks_numbers)
    await message.answer(
        '–ü–æ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?',
        reply_markup=tasks_keyboard,
    )
    await state.set_state(TaskState.show_info)
    logger.info('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')


@router.message(
    TaskState.show_info,
    F.text.regexp(r'SD-(\d{7})+').as_('regexp'),
)
async def show_task_info(
        message: types.Message,
        regexp: re.Match[str],
        state: FSMContext,
):
    logger.info(f'–ó–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–µ: {regexp.group()}')
    task_number = regexp.group()
    task = await Task.objects.select_related('performer')\
                             .aget(number=task_number)
    if task.performer:
        logger.warning('–ó–∞—è–≤–∫—É —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await message.answer(
            '–ó–∞—è–≤–∫—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é. \n'
            '–ü–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–∞: /get_task',
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return

    await message.answer(
        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–µ {md.hcode(task_number)}\n\n'
        f'–ó–∞—è–≤–∏—Ç–µ–ª—å: {task.applicant}\n'
        f'–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.title}\n'
        f'–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n',
        reply_markup=await get_support_task_keyboard(task.id),
    )
    logger.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
    ReplyKeyboardRemove()
    await state.clear()


@router.callback_query(F.data.startswith('stask_'))
async def process_start_task(query: types.CallbackQuery):
    logger.info('–ë–µ—Ä–µ–º –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É')
    task_id = query.data.split('_')[1]
    task = await Task.objects.select_related('performer').aget(id=task_id)
    if task.performer:
        logger.warning('–ó–∞—è–≤–∫—É —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await query.answer()
        await query.message.answer(
            '–ó–∞—è–≤–∫—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é. \n'
            '–ü–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–∞: /get_task'
        )
        return
    employee = await Employee.objects.aget(tg_id=query.from_user.id)
    task.performer = employee
    task.status = 'IN_WORK'
    await task.asave()
    await query.message.delete()
    await query.message.answer(
        f'–í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É {md.hbold(task.number)} –≤ —Ä–∞–±–æ—Ç—É\n'
        '–î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /close_task',
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info('–ó–∞–¥–∞—á—É –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ %s', employee.name)


@router.message(Command('close_task'))
async def close_task(message: types.Message, state: FSMContext):
    logger.info('–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏')
    tasks = await sync_to_async(list)(
        Task.objects.prefetch_related('performer').filter(
            performer__tg_id=message.from_user.id,
            status='IN_WORK',
        )
    )
    if not tasks:
        logger.warning(
            '–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %s –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ',
            message.from_user.id,
        )
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ. \n'
            '–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_task \n'
            '–ò–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /get_task'
        )
        return
    task_number = [task.number for task in tasks]
    await message.answer(
        '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –±—É–¥–µ–º –∑–∞–∫—Ä—ã–≤–∞—Ç—å?',
        reply_markup=await create_tg_keyboard_markup(task_number)
    )
    await state.set_state(TaskState.close_task)


@router.message(
    TaskState.close_task,
    F.text.regexp(r'SD-(\d{7})+').as_('regexp'),
)
async def process_close_task(
        message: types.Message,
        regexp: re.Match[str],
        state: FSMContext,
):
    logger.info(f'–ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: {regexp.group()}')
    task_number = regexp.group()
    task = await Task.objects.select_related('performer')\
                             .aget(number=task_number)
    employee = await Employee.objects.aget(tg_id=message.from_user.id)
    task_applicant = await Employee.objects.aget(name=task.applicant)
    if task.performer.name != employee.name:
        logger.warning('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π –æ—Ç–ª–∏—á–∞—é—Ç—Å—è')
        await message.answer(
            f'–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ –∑–∞–¥–∞—á–µ {task.performer} ',
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    task.status = 'COMPLETED'
    task.finish_at = timezone.now()
    await task.asave()
    await message.bot.send_message(
        task_applicant.tg_id,
        '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.\n'
        '–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–±–æ—Ç—É –æ—Ç 1 –¥–æ 5',
        reply_markup=await get_task_feedback_keyboard(task.id)
    )
    await message.answer(
        '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n'
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: /get_task',
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()
    logger.info('–ó–∞–¥–∞—á–∞ %s –∑–∞–∫—Ä—ã—Ç–∞', task.number)
