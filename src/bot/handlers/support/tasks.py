import logging
import re

from aiogram import F
from aiogram import Router
from aiogram import html
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.state import State
from aiogram.fsm.state import StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from asgiref.sync import sync_to_async
from django.db.models import Q
from django.utils import timezone
from django.utils.dateformat import format

from src.models import Task
from src.models import Group
from src.models import Employee
from src.bot.keyboards import create_tg_keyboard_markup
from src.bot.keyboards import get_support_task_keyboard
from src.bot.keyboards import get_task_feedback_keyboard

logger = logging.getLogger('support_bot')
router = Router(name='support_task_handlers')


class TaskState(StatesGroup):
    show_info = State()
    close_task = State()


class AssignedTaskState(StatesGroup):
    task = State()
    engineers_on_shift = State()
    task_applicant = State()


@router.message(Command('get_task'))
async def get_task(message: types.Message, state: FSMContext):
    logger.info('–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á')
    tasks = await sync_to_async(list)(
        Task.objects.filter(
            status='NEW',
            number__istartswith='sd',
        ).order_by('-id')
    )
    if not tasks:
        logger.warning('–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á')
        await message.answer('–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á ü•π')
        return
    tasks_numbers = [task.number for task in tasks]
    tasks_keyboard = await create_tg_keyboard_markup(tasks_numbers)
    await message.answer(
        '–ü–æ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?',
        reply_markup=tasks_keyboard,
    )
    await state.set_state(TaskState.show_info)
    logger.info('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')


@router.message(
    TaskState.show_info,
    F.text.regexp(r'SD-(\d{7})+').as_('regexp'),
)
async def show_task_info(
        message: types.Message,
        regexp: re.Match[str],
        state: FSMContext,
):
    logger.info(f'–ó–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–µ: {regexp.group()}')
    task_number = regexp.group()
    task = await Task.objects.select_related('performer') \
        .aget(number=task_number)
    if task.performer:
        logger.warning('–ó–∞—è–≤–∫—É —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await message.answer(
            '–ó–∞—è–≤–∫—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é. \n'
            '–ü–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–∞: /get_task',
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return

    await message.answer(
        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–µ {html.code(task_number)}\n\n'
        f'–ó–∞—è–≤–∏—Ç–µ–ª—å: {task.applicant}\n'
        f'–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.title}\n'
        f'–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n',
        reply_markup=await get_support_task_keyboard(task.id),
    )
    logger.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
    ReplyKeyboardRemove()
    await state.clear()


@router.callback_query(F.data.startswith('stask_'))
async def process_start_task(query: types.CallbackQuery, employee: Employee):
    logger.info('–ë–µ—Ä–µ–º –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É')
    task_id = query.data.split('_')[1]
    task = await Task.objects.select_related('performer').aget(id=task_id)
    if task.performer:
        logger.warning('–ó–∞—è–≤–∫—É —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await query.answer()
        await query.message.answer(
            '–ó–∞—è–≤–∫—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é. \n'
            '–ü–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–∞: /get_task'
        )
        return
    task_applicant = await Employee.objects.aget(name=task.applicant)
    task.performer = employee
    task.status = 'IN_WORK'
    await task.asave()
    await query.message.delete()
    await query.message.answer(
        f'–í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É {html.bold(task.number)} –≤ —Ä–∞–±–æ—Ç—É\n'
        '–î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /close_task',
        reply_markup=ReplyKeyboardRemove()
    )
    await query.bot.send_message(
        task_applicant.tg_id,
        f'–í–∞—à—É –∑–∞–¥–∞—á—É –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –∏–Ω–∂–µ–Ω–µ—Ä: {employee.name}\n'
        f'–¢–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏: {employee.tg_nickname}'
    )
    logger.info('–ó–∞–¥–∞—á—É –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ %s', employee.name)


@router.callback_query(F.data.startswith('atask_'))
async def process_assigned_task(
        query: types.CallbackQuery,
        employee: Employee,
        state: FSMContext,
):
    logger.info('–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    task_id = query.data.split('_')[1]
    task = await Task.objects.select_related('performer').aget(id=task_id)

    if task.performer:
        logger.warning('–ó–∞—è–≤–∫—É —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await query.answer()
        await query.message.answer(
            f'–ó–∞—è–≤–∫—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {task.performer.name}'
        )
        return

    employee_engineer_group = await employee.groups.aget(
        Q(name__icontains='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') | Q(name__icontains='–∏–Ω–∂–µ–Ω–µ—Ä'),
    )
    logger.debug('employee_engineer_group: %s', employee_engineer_group)
    engineers_on_shift = await get_engineers_for_assigned_task(
        employee_engineer_group,
        employee.id,
    )
    if not engineers_on_shift:
        await query.message.answer(
            '–ù–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É'
        )
        return
    engineers_names = [engineer.name for engineer in engineers_on_shift]
    keyboard = await create_tg_keyboard_markup(engineers_names)
    task_applicant = await Employee.objects.aget(name=task.applicant)
    await state.update_data(
        task=task,
        engineers_on_shift=engineers_on_shift,
        task_applicant=task_applicant
    )
    await query.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –Ω–∞ —Å–º–µ–Ω–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
        reply_markup=keyboard,
    )
    await query.message.delete()
    await state.set_state(AssignedTaskState.task)


@router.message(AssignedTaskState.task)
async def process_assigned_task_step_2(
        message: types.Message,
        employee: Employee,
        state: FSMContext,
):
    logger.info('–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞ —à–∞–≥ 2')
    data = await state.get_data()
    task = Task.objects.select_related('performer').aget(id=data['task'].id)
    if task.performer:
        await message.answer(
            f'–ó–∞–¥–∞—á—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏–Ω–∂–µ–Ω–µ—Ä {task.performer.name}'
        )
        await state.clear()
        return
    selected_engineer_name = message.text
    engineers_on_shift = data['engineers_on_shift']
    task_applicant = data['task_applicant']
    selected_engineer = None

    for engineer in engineers_on_shift:
        if engineer.name == selected_engineer_name:
            selected_engineer = engineer
            break
    logger.debug('engineers_on_shift: %s', engineers_on_shift)
    logger.debug('selected_engineer: %s', selected_engineer)
    task.performer = selected_engineer
    await task.asave()
    logger.info(
        '–ò–Ω–∂–µ–Ω–µ—Ä %s –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É %s',
        selected_engineer.name,
        task.number,
    )
    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–∏–≤—à–µ–º—É –∏–Ω–∂–µ–Ω–µ—Ä—É')
    await message.answer(
        f'–ó–∞–¥–∞—á–∞ {html.code(task.number)} '
        f'–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä—É {html.code(selected_engineer.name)}'
    )
    logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é')
    await message.bot.send_message(
        selected_engineer.tg_id,
        f'{employee.name} –Ω–∞–∑–Ω–∞—á–∏–ª –Ω–∞ –≤–∞—Å –∑–∞–¥–∞—á—É {task.number}\n.'
        f'–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ {task_applicant.name} '
        f'({task_applicant.tg_nickname})'
    )
    logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫—É –∑–∞–¥–∞—á–∏')
    await message.bot.send_message(
        task_applicant.tg_id,
        f'–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏–Ω–∂–µ–Ω–µ—Ä–æ–º {html.code(selected_engineer.name)}'
        f'\n–¢–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏: {selected_engineer.tg_nickname}'
    )
    logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.clear()


@sync_to_async
def get_engineers_for_assigned_task(
        current_employee_group: Group,
        current_employee_id: int,
):
    engineers_on_shift = Employee.objects.filter(work_shifts__is_works=True)
    logger.debug('–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: %s', current_employee_group)
    if current_employee_group.name == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã':
        logger.debug('–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ')
        engineers_on_shift = engineers_on_shift.filter(
            groups__name__in=(
                '–í–µ–¥—É—â–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã',
                '–°—Ç–∞—Ä—à–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã',
                '–ò–Ω–∂–µ–Ω–µ—Ä—ã',
            ),
        )
    if current_employee_group.name == '–í–µ–¥—É—â–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã':
        logger.debug('–ü–æ–∏—Å–∫ –°—Ç–∞—Ä—à–∏—Ö –∏ –æ–±—ã—á–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ')
        engineers_on_shift = engineers_on_shift.filter(
            groups__name__in=('–°—Ç–∞—Ä—à–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã', '–ò–Ω–∂–µ–Ω–µ—Ä—ã'),
        )
    if current_employee_group.name == '–°—Ç–∞—Ä—à–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã':
        logger.debug('–ü–æ–∏—Å–∫ –æ–±—ã—á–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ')
        engineers_on_shift = engineers_on_shift.filter(groups__name='–ò–Ω–∂–µ–Ω–µ—Ä—ã')

    if not engineers_on_shift.exclude(id=current_employee_id):
        logger.warning('–ù–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ')
        return
    logger.debug('engineers_on_shift: %s', engineers_on_shift)
    logger.info('–ù–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤')
    return list(engineers_on_shift)


@router.message(Command('close_task'))
async def close_task(message: types.Message, state: FSMContext):
    logger.info('–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏')
    tasks = await get_task_in_work_by_employee(message.from_user.id)
    if not tasks:
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ. \n'
            '–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_task \n'
            '–ò–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /get_task'
        )
        return
    task_number = [task.number for task in tasks]
    await message.answer(
        '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –±—É–¥–µ–º –∑–∞–∫—Ä—ã–≤–∞—Ç—å?',
        reply_markup=await create_tg_keyboard_markup(task_number)
    )
    await state.set_state(TaskState.close_task)


@router.message(
    TaskState.close_task,
    F.text.regexp(r'SD-(\d{7})+').as_('regexp'),
)
async def process_close_task(
        message: types.Message,
        employee: Employee,
        regexp: re.Match[str],
        state: FSMContext,
):
    logger.info(f'–ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: {regexp.group()}')
    task_number = regexp.group()
    task = await Task.objects.select_related('performer') \
        .aget(number=task_number)
    task_applicant = await Employee.objects.aget(name=task.applicant)
    if task.performer.name != employee.name:
        logger.warning('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π –æ—Ç–ª–∏—á–∞—é—Ç—Å—è')
        await message.answer(
            f'–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ –∑–∞–¥–∞—á–µ {task.performer} ',
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    task.status = 'COMPLETED'
    task.finish_at = timezone.now()
    await task.asave()
    await message.bot.send_message(
        task_applicant.tg_id,
        '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.\n'
        '–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–±–æ—Ç—É –æ—Ç 1 –¥–æ 5',
        reply_markup=await get_task_feedback_keyboard(task.id)
    )
    await message.answer(
        '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n'
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: /get_task',
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()
    logger.info('–ó–∞–¥–∞—á–∞ %s –∑–∞–∫—Ä—ã—Ç–∞', task.number)


@router.message(Command('my_active_tasks'))
async def get_employee_active_tasks(
        message: types.Message,
):
    logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á')
    tasks = await get_task_in_work_by_employee(message.from_user.id)
    if not tasks:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ')
        return
    file_to_send = await prepare_active_tasks_as_file(tasks)
    await message.answer_document(
        file_to_send,
        caption='–ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ',
    )


@router.message(Command('new_tasks'))
async def get_new_tasks(
        message: types.Message,
):
    logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á')
    tasks = await sync_to_async(list)(
        Task.objects.filter(
            number__startswith='SD-',
            performer__isnull=True,
        )
    )
    logger.debug('–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: %s', tasks)
    if not tasks:
        await message.answer('–ù–µ—Ç –Ω–æ–≤—ã–π –∑–∞–¥–∞—á')
        return
    file_to_send = await prepare_new_tasks_as_file(tasks)
    await message.answer_document(
        file_to_send,
        caption='–ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ',
    )


async def prepare_active_tasks_as_file(
        tasks: list[Task]
) -> types.BufferedInputFile:
    logger.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞  —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞')
    report = ['–£ –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏: \n']
    time_formatted_mask = 'd-m-Y H:i:s'
    for task in tasks:
        start_at = format(task.start_at, time_formatted_mask)
        text = f'{task.number}\n\n' \
               f'–ó–∞—è–≤–∏—Ç–µ–ª—å: {task.applicant}\n' \
               f'–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.title}\n' \
               f'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {start_at}\n' \
               f'–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.description}'
        report.append(text)

    file = '\n\n'.join(report).encode('utf-8')
    file_name = format(timezone.now(), 'd-m-Y') + '_tasks.txt'
    logger.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    return types.BufferedInputFile(file, filename=file_name)


async def prepare_new_tasks_as_file(
        tasks: list[Task]
) -> types.BufferedInputFile:
    logger.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞  —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞')
    report = ['–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: \n']
    time_formatted_mask = 'd-m-Y H:i:s'
    for task in tasks:
        start_at = format(task.start_at, time_formatted_mask)
        text = f'{task.number}\n\n' \
               f'–ó–∞—è–≤–∏—Ç–µ–ª—å: {task.applicant}\n' \
               f'–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.title}\n' \
               f'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {start_at}\n' \
               f'–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.description}'
        report.append(text)

    file = '\n\n'.join(report).encode('utf-8')
    file_name = format(timezone.now(), 'd-m-Y') + '_new_tasks.txt'
    logger.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    return types.BufferedInputFile(file, filename=file_name)


async def get_task_in_work_by_employee(employee_id: id) -> list[Task] | None:
    logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å id: %s', employee_id)
    tasks = await sync_to_async(list)(
        Task.objects.prefetch_related('performer').filter(
            performer__tg_id=employee_id,
            status='IN_WORK',
        )
    )
    if not tasks:
        logger.warning(
            '–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %s –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ',
            employee_id,
        )
        return
    logger.info('–ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã')
    return tasks
