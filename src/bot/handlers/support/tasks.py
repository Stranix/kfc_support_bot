import logging
import os
import re
from typing import Union

from aiogram import F, Bot
from aiogram import Router
from aiogram import html
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.state import State
from aiogram.fsm.state import StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from asgiref.sync import sync_to_async

from django.db.models import Q
from django.utils import timezone
from django.utils.dateformat import format

from src.bot import keyboards
from src.models import SDTask
from src.models import Group
from src.models import Employee
from src.bot.middlewares import AlbumMiddleware


logger = logging.getLogger('support_bot')
router = Router(name='support_task_handlers')
router.message.outer_middleware(AlbumMiddleware())


class TaskState(StatesGroup):
    show_info = State()
    close_task = State()
    get_doc = State()
    doc_approved = State()
    approved_sub_tasks = State()
    task_comment = State()
    approved_close_tasks = State()


class AssignedTaskState(StatesGroup):
    task = State()
    engineers_on_shift = State()
    task_applicant = State()


@router.message(Command('get_task'))
async def get_task(
        message: types.Message,
        employee: Employee,
        state: FSMContext
):
    logger.info('–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á')
    tasks = []
    engineers_groups = ['–°—Ç–∞—Ä—à–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã', '–í–µ–¥—É—â–µ–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã', '–ò–Ω–∂–µ–Ω–µ—Ä—ã']
    if await employee.groups.filter(name__in=engineers_groups).aexists():
        logger.debug('–ó–∞–¥–∞—á–∏ –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤')
        tasks = await sync_to_async(list)(
            SDTask.objects.filter(
                status='NEW',
                support_group='ENGINEER',
            ).order_by('-id')
        )
    if await employee.groups.filter(name__in=['–î–∏—Å–ø–µ—Ç—á–µ—Ä—ã']).aexists():
        logger.debug('–ó–∞–¥–∞—á–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤')
        tasks = await sync_to_async(list)(
            SDTask.objects.filter(
                status='NEW',
                support_group='DISPATCHER',
            ).order_by('-id')
        )
    if not tasks:
        logger.warning('–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á')
        await message.answer('–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á ü•π')
        return
    tasks_numbers = [task.number for task in tasks]
    tasks_keyboard = await keyboards.create_tg_keyboard_markup(tasks_numbers)
    await message.answer(
        '–ü–æ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?',
        reply_markup=tasks_keyboard,
    )
    await state.set_state(TaskState.show_info)
    logger.info('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')


@router.message(
    TaskState.show_info,
    F.text.regexp(r'SD-(\d{5,7})+').as_('regexp'),
)
async def show_task_info(
        message: types.Message,
        regexp: re.Match[str],
        state: FSMContext,
):
    logger.info(f'–ó–∞–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–µ: {regexp.group()}')
    task_number = regexp.group()
    task = await SDTask.objects.select_related('applicant', 'performer') \
        .aget(number=task_number)
    if task.performer:
        logger.warning('–ó–∞—è–≤–∫—É —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await message.answer(
            '–ó–∞—è–≤–∫—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é. \n'
            '–ü–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–∞: /get_task',
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return

    await message.answer(
        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–µ {html.code(task_number)}\n\n'
        f'–ó–∞—è–≤–∏—Ç–µ–ª—å: {task.applicant.name}\n'
        f'–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.title}\n'
        f'–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n',
        reply_markup=await keyboards.get_support_task_keyboard(task.id),
    )
    logger.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
    ReplyKeyboardRemove()
    await state.clear()


@router.callback_query(F.data.startswith('stask_'))
async def process_start_task(query: types.CallbackQuery, employee: Employee):
    logger.info('–ë–µ—Ä–µ–º –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É')
    task_id = query.data.split('_')[1]
    task = await SDTask.objects.select_related(
        'applicant',
        'performer',
    ).aget(id=task_id)

    if task.performer:
        logger.warning('–ó–∞—è–≤–∫—É —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await query.answer()
        await query.message.answer(
            '–ó–∞—è–≤–∫—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥—É—é. \n'
            '–ü–æ–º–æ–∂–µ—Ç –∫–æ–º–∞–Ω–¥–∞: /get_task'
        )
        return
    task.performer = employee
    task.status = 'IN_WORK'
    await task.asave()
    await query.message.delete()
    await query.message.answer(
        f'üíº–í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É {html.bold(task.number)} –≤ —Ä–∞–±–æ—Ç—É\n'
        f'–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {task.applicant.name} '
        f'({task.applicant.tg_nickname})\n\n'
        f'{task.title}\n'
        f'–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {html.code(task.description)}\n\n'
        '–î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /close_task',
        reply_markup=ReplyKeyboardRemove()
    )
    await query.bot.send_message(
        task.applicant.tg_id,
        f'–í–∞—à—É –∑–∞–¥–∞—á—É –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –∏–Ω–∂–µ–Ω–µ—Ä: {employee.name}\n'
        f'–¢–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏: {employee.tg_nickname}'
    )
    logger.info('–ó–∞–¥–∞—á—É –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ %s', employee.name)


@router.callback_query(F.data.startswith('atask_'))
async def process_assigned_task(
        query: types.CallbackQuery,
        employee: Employee,
        state: FSMContext,
):
    logger.info('–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
    task_id = query.data.split('_')[1]
    task = await SDTask.objects.select_related(
        'applicant',
        'performer',
    ).aget(id=task_id)

    if task.performer:
        logger.warning('–ó–∞—è–≤–∫—É —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
        await query.answer()
        await query.message.answer(
            f'–ó–∞—è–≤–∫—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {task.performer.name}'
        )
        return

    employee_engineer_group = await employee.groups.aget(
        Q(name__icontains='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') | Q(name__icontains='–∏–Ω–∂–µ–Ω–µ—Ä'),
    )
    logger.debug('employee_engineer_group: %s', employee_engineer_group)
    engineers_on_shift = await get_engineers_for_assigned_task(
        employee_engineer_group,
        employee.id,
    )
    if not engineers_on_shift:
        await query.message.answer(
            '–ù–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É'
        )
        return
    engineers_names = [engineer.name for engineer in engineers_on_shift]
    keyboard = await keyboards.create_tg_keyboard_markup(engineers_names)
    await state.update_data(
        task=task,
        engineers_on_shift=engineers_on_shift,
        task_applicant=task.applicant
    )
    await query.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –Ω–∞ —Å–º–µ–Ω–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
        reply_markup=keyboard,
    )
    await query.message.delete()
    await state.set_state(AssignedTaskState.task)


@router.message(AssignedTaskState.task)
async def process_assigned_task_step_2(
        message: types.Message,
        employee: Employee,
        state: FSMContext,
):
    logger.info('–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞ —à–∞–≥ 2')
    data = await state.get_data()
    task = await SDTask.objects.select_related(
        'applicant',
        'performer',
    ).aget(id=data['task'].id)
    if task.performer:
        await message.answer(
            f'–ó–∞–¥–∞—á—É –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏–Ω–∂–µ–Ω–µ—Ä {task.performer.name}'
        )
        await state.clear()
        return
    selected_engineer_name = message.text
    engineers_on_shift = data['engineers_on_shift']
    task_applicant = data['task_applicant']
    selected_engineer = None

    for engineer in engineers_on_shift:
        if engineer.name == selected_engineer_name:
            selected_engineer = engineer
            break
    logger.debug('engineers_on_shift: %s', engineers_on_shift)
    logger.debug('selected_engineer: %s', selected_engineer)
    task.performer = selected_engineer
    task.status = 'IN_WORK'
    await task.asave()
    logger.info(
        '–ò–Ω–∂–µ–Ω–µ—Ä %s –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É %s',
        selected_engineer.name,
        task.number,
    )
    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–∏–≤—à–µ–º—É –∏–Ω–∂–µ–Ω–µ—Ä—É')
    await message.answer(
        f'–ó–∞–¥–∞—á–∞ {html.code(task.number)} '
        f'–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä—É {html.code(selected_engineer.name)}'
    )
    logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é')
    await message.bot.send_message(
        selected_engineer.tg_id,
        f'{employee.name} –Ω–∞–∑–Ω–∞—á–∏–ª –Ω–∞ –≤–∞—Å –∑–∞–¥–∞—á—É {task.number}\n.'
        f'–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ {task_applicant.name} '
        f'({task_applicant.tg_nickname})'
    )
    logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫—É –∑–∞–¥–∞—á–∏')
    await message.bot.send_message(
        task_applicant.tg_id,
        f'–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏–Ω–∂–µ–Ω–µ—Ä–æ–º {html.code(selected_engineer.name)}'
        f'\n–¢–µ–ª–µ–≥—Ä–∞–º –¥–ª—è —Å–≤—è–∑–∏: {selected_engineer.tg_nickname}'
    )
    logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.clear()


@sync_to_async
def get_engineers_for_assigned_task(
        current_employee_group: Group,
        current_employee_id: int,
):
    engineers_on_shift = Employee.objects.filter(work_shifts__is_works=True)
    logger.debug('–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: %s', current_employee_group)
    if current_employee_group.name == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã':
        logger.debug('–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ')
        engineers_on_shift = engineers_on_shift.filter(
            groups__name__in=(
                '–í–µ–¥—É—â–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã',
                '–°—Ç–∞—Ä—à–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã',
                '–ò–Ω–∂–µ–Ω–µ—Ä—ã',
            ),
        )
    if current_employee_group.name == '–í–µ–¥—É—â–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã':
        logger.debug('–ü–æ–∏—Å–∫ –°—Ç–∞—Ä—à–∏—Ö –∏ –æ–±—ã—á–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ')
        engineers_on_shift = engineers_on_shift.filter(
            groups__name__in=('–°—Ç–∞—Ä—à–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã', '–ò–Ω–∂–µ–Ω–µ—Ä—ã'),
        )
    if current_employee_group.name == '–°—Ç–∞—Ä—à–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã':
        logger.debug('–ü–æ–∏—Å–∫ –æ–±—ã—á–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ')
        engineers_on_shift = engineers_on_shift.filter(groups__name='–ò–Ω–∂–µ–Ω–µ—Ä—ã')

    if not engineers_on_shift.exclude(id=current_employee_id):
        logger.warning('–ù–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ')
        return
    logger.debug('engineers_on_shift: %s', engineers_on_shift)
    logger.info('–ù–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤')
    return list(engineers_on_shift)


@router.message(Command('close_task'))
async def close_task(message: types.Message, state: FSMContext):
    logger.info('–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏')
    tasks = await get_task_in_work_by_employee(message.from_user.id)
    if not tasks:
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ. \n'
            '–ß—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_task \n'
            '–ò–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /get_task'
        )
        return
    task_number = [task.number for task in tasks]
    await message.answer(
        '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –±—É–¥–µ–º –∑–∞–∫—Ä—ã–≤–∞—Ç—å?',
        reply_markup=await keyboards.create_tg_keyboard_markup(task_number)
    )
    await state.set_state(TaskState.close_task)


@router.message(
    TaskState.close_task,
    F.text.regexp(r'SD-(\d{5,7})+').as_('regexp'),
)
async def process_close_task(
        message: types.Message,
        employee: Employee,
        regexp: re.Match[str],
        state: FSMContext,
):
    logger.info(f'–ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: {regexp.group()}')
    task_number = regexp.group()
    task = await SDTask.objects.select_related('applicant', 'performer') \
        .aget(number=task_number)
    if task.performer.name != employee.name:
        logger.warning('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π –æ—Ç–ª–∏—á–∞—é—Ç—Å—è')
        await message.answer(
            f'–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ –∑–∞–¥–∞—á–µ {task.performer} ',
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return
    if task.support_group == 'DISPATCHER':
        await dispatcher_close_task(message, task, state)
        return
    if task.support_group == 'ENGINEER':
        await engineer_close_task(message, task, state)


async def dispatcher_close_task(
        message: types.Message,
        task: SDTask,
        state: FSMContext,
):
    logger.info('–°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º')
    await message.answer(
        '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–∞–∫—Ç—ã, —Ç–µ—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–µ)\n\n'
        '<i>–ó–∞–≥—Ä—É–∂–∞—Ç—å –Ω–∞–¥–æ —Å—Ä–∞–∑—É, –≥—Ä—É–ø–ø–æ–π —Ñ–∞–π–ª–æ–≤\n'
        '–°–∫–∞–Ω—ã (—Ñ–æ—Ç–æ), –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –±–µ–∑ –°–∂–∞—Ç–∏—è —Ñ–æ—Ç–æ</i>',
        reply_markup=await keyboards.create_tg_keyboard_markup(
            ['–±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'],
        ),
    )
    await state.update_data(close_task=task)
    await state.set_state(TaskState.get_doc)
    logger.info('–ó–∞–≤–µ—Ä—à–µ–Ω–æ')


@router.message(TaskState.get_doc)
async def dispatcher_close_task_get_doc(
        message: types.Message,
        state: FSMContext,
        album: Union[dict, None] = None,
):
    if album is None:
        album = {}
    logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
    keyboard = await keyboards.get_choice_task_doc_approved_keyboard()

    if message.text and message.text.lower() == '–±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤':
        await message.answer(
            '–ù–µ—Ç –∞–∫—Ç–æ–≤ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π. –í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=keyboard,
        )
        await state.update_data(get_doc={})
        await state.set_state(TaskState.doc_approved)
        return
    if not message.document and not album:
        await message.answer(
            '–í—Å–µ –µ—â–µ –∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n'
            '–ü–µ—Ä–µ—Å—ã–ª–∫—É –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é',
        )
        return

    if message.document and not album:
        await message.answer(
            '–ü–æ–ª—É—á–µ–Ω –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç. –í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=keyboard,
        )
        await state.update_data(
            get_doc={
                message.document.file_name: message.document.file_id
            }
        )
        await state.set_state(TaskState.doc_approved)
        return

    documents = {}
    for doc in album:
        documents[doc.document.file_name] = doc.document.file_id

    await message.answer(
        f'–ü–æ–ª—É—á–∏–ª {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç(–æ–≤)\n'
        f'–ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤: {html.code(", ".join(documents.keys()))}\n\n'
        f'–í—Å–µ –≤–µ—Ä–Ω–æ?',
        reply_markup=keyboard,
    )
    await state.update_data(get_doc=documents)
    await state.set_state(TaskState.doc_approved)


@router.callback_query(TaskState.doc_approved, F.data == 'doc_apr_yes')
async def dispatcher_close_task_approved_doc_yes(
        query: types.CallbackQuery,
        state: FSMContext,
):
    await query.message.delete()
    await query.message.answer(
        f'–ü—Ä–∏–Ω—è–ª.\n\n'
        f'–í–≤–µ–¥–∏—Ç–µ {html.underline("–Ω–æ–º–µ—Ä–∞ —Å –±—É–∫–≤–∞–º–∏")} –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞–¥–∞—á\n'
        f'–ï—Å–ª–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞–¥–∞—á –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–æ—Å—å –Ω–∞–ø–∏—à–∏ {html.bold("–Ω–µ—Ç")}',
        reply_markup=await keyboards.create_tg_keyboard_markup(['–Ω–µ—Ç']),
    )
    await state.set_state(TaskState.approved_sub_tasks)


@router.message(TaskState.approved_sub_tasks)
async def dispatcher_close_task_approved_sub_tasks(
        message: types.Message,
        state: FSMContext,
):
    logger.debug('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π')
    sub_tasks = []
    if message.text.lower() != '–Ω–µ—Ç':
        sub_tasks = re.findall(r'(S[C,D]-\d{5,7})+', message.text)
        if not sub_tasks:
            await message.answer(
                f'–ù–µ –≤–∏–∂—É –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n'
                f'–ü—Ä–∏–º–µ—Ä: {html.code("SC-1422495 SD-139518")}',
            )
            return
    await state.update_data(approved_sub_tasks=sub_tasks)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è',
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(TaskState.task_comment)


@router.message(TaskState.task_comment)
async def dispatcher_close_task_comment(
        message: types.Message,
        state: FSMContext,
):
    data = await state.get_data()
    docs_names = ', '.join(data['get_doc'].keys())
    task_info = '–ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É: {number}\n' \
                '–ü—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {docs}\n' \
                '–î–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏: {sub_tasks}\n' \
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {task_comment}'.format(
                    number=data['close_task'].number,
                    docs=docs_names,
                    sub_tasks=data['approved_sub_tasks'],
                    task_comment=message.text)
    await state.update_data(task_comment=message.text)
    keyboard = await keyboards.get_choice_task_closed_approved_keyboard()
    await message.answer(
        f'–ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º\n\n{html.code(task_info)}',
        reply_markup=keyboard,
    )
    await state.set_state(TaskState.approved_close_tasks)


@router.callback_query(
    TaskState.approved_close_tasks,
    F.data == 'apr_close_task',
)
async def dispatcher_close_task_approved(
        query: types.CallbackQuery,
        state: FSMContext,
):
    logger.info('–°—Ç–∞—Ä—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º')
    await query.message.delete()
    data = await state.get_data()
    task: SDTask = data['close_task']
    approved_sub_tasks = data['approved_sub_tasks']
    logger.debug('task: %s', task)
    files_save_info = await save_doc_from_tg_to_disk(
        query.bot,
        task.number,
        data['get_doc'],
    )
    logger.debug('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª—ã: %s', files_save_info)

    if files_save_info:
        files_save_info = str(files_save_info).strip('[]') + ','

    if approved_sub_tasks:
        approved_sub_tasks = ','.join(approved_sub_tasks)

    task.status = 'COMPLETED'
    task.closing_comment = data['task_comment']
    task.sub_task_number = approved_sub_tasks
    task.doc_path = files_save_info
    task.finish_at = timezone.now()
    await task.asave()

    await query.bot.send_message(
        task.applicant.tg_id,
        '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.\n'
        '–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–±–æ—Ç—É –æ—Ç 1 –¥–æ 5',
        reply_markup=await keyboards.get_task_feedback_keyboard(task.id)
    )
    await query.message.answer(
        '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n'
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: /get_task',
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()
    logger.info('–ó–∞–¥–∞—á–∞ %s –∑–∞–∫—Ä—ã—Ç–∞', task.number)
    await state.clear()
    logger.info('–ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞')


@router.callback_query(TaskState.doc_approved, F.data == 'doc_apr_no')
async def dispatcher_close_task_approved_doc_no(
        query: types.CallbackQuery,
        state: FSMContext,
):
    await query.answer()
    await query.message.answer('–û–∫. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. –ñ–¥—É –¥–æ–∫—É–º–µ–Ω—Ç—ã')
    await state.update_data(get_doc=State())
    await state.set_state(TaskState.get_doc)


async def engineer_close_task(
        message: types.Message,
        task: SDTask,
        state: FSMContext,
):
    task.status = 'COMPLETED'
    task.finish_at = timezone.now()
    await task.asave()
    await message.bot.send_message(
        task.applicant.tg_id,
        '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.\n'
        '–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–±–æ—Ç—É –æ—Ç 1 –¥–æ 5',
        reply_markup=await keyboards.get_task_feedback_keyboard(task.id)
    )
    await message.answer(
        '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n'
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á: /get_task',
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.clear()
    logger.info('–ó–∞–¥–∞—á–∞ %s –∑–∞–∫—Ä—ã—Ç–∞', task.number)


@router.message(Command('my_active_tasks'))
async def get_employee_active_tasks(
        message: types.Message,
):
    logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á')
    tasks = await get_task_in_work_by_employee(message.from_user.id)
    if not tasks:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ')
        return
    file_to_send = await prepare_active_tasks_as_file(tasks)
    await message.answer_document(
        file_to_send,
        caption='–ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ',
    )


@router.message(Command('new_tasks'))
async def get_new_tasks(
        message: types.Message,
):
    logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á')
    tasks = await sync_to_async(list)(
        SDTask.objects.filter(performer__isnull=True)
    )
    logger.debug('–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: %s', tasks)
    if not tasks:
        await message.answer('–ù–µ—Ç –Ω–æ–≤—ã–π –∑–∞–¥–∞—á')
        return
    file_to_send = await prepare_new_tasks_as_file(tasks)
    await message.answer_document(
        file_to_send,
        caption='–ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ',
    )


async def prepare_active_tasks_as_file(
        tasks: list[SDTask]
) -> types.BufferedInputFile:
    logger.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞  —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞')
    report = ['–£ –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏: \n']
    time_formatted_mask = 'd-m-Y H:i:s'
    for task in tasks:
        start_at = format(task.start_at, time_formatted_mask)
        text = f'{task.number}\n\n' \
               f'–ó–∞—è–≤–∏—Ç–µ–ª—å: {task.applicant}\n' \
               f'–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.title}\n' \
               f'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {start_at}\n' \
               f'–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.description}'
        report.append(text)

    file = '\n\n'.join(report).encode('utf-8')
    file_name = format(timezone.now(), 'd-m-Y') + '_tasks.txt'
    logger.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    return types.BufferedInputFile(file, filename=file_name)


async def prepare_new_tasks_as_file(
        tasks: list[SDTask]
) -> types.BufferedInputFile:
    logger.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞  —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞')
    report = ['–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: \n']
    time_formatted_mask = 'd-m-Y H:i:s'
    for task in tasks:
        start_at = format(task.start_at, time_formatted_mask)
        text = f'{task.number}\n\n' \
               f'–ó–∞—è–≤–∏—Ç–µ–ª—å: {task.applicant.name}\n' \
               f'–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.title}\n' \
               f'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {start_at}\n' \
               f'–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {task.description}'
        report.append(text)

    file = '\n\n'.join(report).encode('utf-8')
    file_name = format(timezone.now(), 'd-m-Y') + '_new_tasks.txt'
    logger.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    return types.BufferedInputFile(file, filename=file_name)


async def get_task_in_work_by_employee(employee_id: id) -> list[SDTask] | None:
    logger.info('–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É —Å id: %s', employee_id)
    tasks = await sync_to_async(list)(
        SDTask.objects.prefetch_related('performer').filter(
            performer__tg_id=employee_id,
            status='IN_WORK',
        )
    )
    if not tasks:
        logger.warning(
            '–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %s –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ',
            employee_id,
        )
        return
    logger.info('–ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã')
    return tasks


async def save_doc_from_tg_to_disk(
        bot: Bot,
        task_number: str,
        documents: dict
) -> list[tuple] | None:
    logger.info('–°–æ—Ö—Ä–∞–Ω—è—é –¥–æ–∫—É–º–µ–Ω—Ç—ã')
    logger.debug('documents: %s', documents)
    if not documents:
        logger.debug('–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö')
        return
    save_to = os.path.join('media/docs/', task_number)
    if not os.path.exists(save_to):
        os.makedirs(save_to)

    save_report = []
    for doc_name, doc_id in documents.items():
        tg_file = await bot.get_file(doc_id)
        save_path = os.path.join(save_to, doc_name)
        try:
            await bot.download_file(tg_file.file_path, save_path)
            save_report.append((doc_name, save_path))
        except FileNotFoundError:
            logger.error('–ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ %s', save_path)
    logger.info('–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    return save_report
