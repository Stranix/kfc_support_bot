import logging

from datetime import timedelta

from asgiref.sync import sync_to_async

from django.utils import timezone
from django.utils.timezone import make_aware

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import F
from aiogram import Bot
from aiogram import html
from aiogram import types
from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.fsm.state import StatesGroup

from src.models import WorkShift
from src.models import Employee
from src.models import Group
from src.models import Task

logger = logging.getLogger('support_bot')
router = Router(name='scheduler_handlers')


class SchedulerJobState(StatesGroup):
    job_choice = State()


@router.message(Command('scheduler_jobs'))
async def get_scheduler_jobs(
        message: types.Message,
        scheduler: AsyncIOScheduler,
):
    jobs = scheduler.get_jobs()
    message_for_send = ['–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ scheduler:\n']
    for job in jobs:
        job_next_run_time = html.code(
            job.next_run_time.strftime('%d-%m-%Y %H:%M:%S'),
        )
        job_info = f'<b>Job id:</b> {html.code(job.id)}\n' \
                   f'<b>Job next_run_time:</b> {job_next_run_time}\n'
        message_for_send.append(job_info)
    await message.answer('\n'.join(message_for_send))


@router.message(Command('close_scheduler_job'))
async def close_scheduler_job(
        message: types.Message,
        state: FSMContext,
):
    await message.answer('–ö–∞–∫–æ–π job –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?')
    await state.set_state(SchedulerJobState.job_choice)


@router.message(F.text.startswith('job_'))
async def process_close_scheduler_job(
        message: types.Message,
        scheduler: AsyncIOScheduler,
        state: FSMContext,
):
    scheduler.remove_job(message.text)
    await message.answer(f'Job {message.text} —É–¥–∞–ª–µ–Ω')
    await state.clear()


async def check_task_activate_step_1(
        bot: Bot,
        task_number: str,
        scheduler: AsyncIOScheduler,
):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ %s –ø–µ—Ä–≤—ã–µ 10 –º–∏–Ω—É—Ç', task_number)
    notify = f'–í–Ω–∏–º–∞–Ω–∏–µ –∑–∞–¥–∞—á—É {task_number} –Ω–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É —Å–ø—É—Å—Ç—è 10 –º–∏–Ω'
    try:
        task = await Task.objects.select_related('performer')\
                                 .aget(number=task_number)
    except Task.DoesNotExist:
        logger.warning('–ó–∞–¥–∞—á–∏ %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î', task_number)
        return

    if task.performer:
        logger.info('–ù–∞ –∑–∞–¥–∞—á—É –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–Ω–∂–µ–Ω–µ—Ä')
        return
    middle_engineers_group = await Group.objects.aget(name='–°—Ç–∞—Ä—à–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã')
    middle_engineers = await sync_to_async(list)(
        Employee.objects.filter(
            groups=middle_engineers_group,
            work_shifts__is_works=True,
        )
    )
    logger.debug('middle_engineers: %s', middle_engineers)
    if not middle_engineers:
        logger.warning('–ù–∞ —Å–º–µ–Ω–µ –Ω–µ—Ç —Å—Ç–∞—Ä—à–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤!')
        return
    await send_schedulers_notify(bot, middle_engineers, notify)
    scheduler.add_job(
        check_task_activate_step_2,
        'date',
        run_date=timezone.now() + timedelta(minutes=10),
        timezone='Europe/Moscow',
        args=(bot, task_number),
        id=f'job_{task_number}_step2',
    )


async def check_task_activate_step_2(bot: Bot, task_number: str):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ %s —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç', task_number)
    notify = f'‚Äº–ó–∞–¥–∞—á—É {task_number} –Ω–µ –≤–∑—è–ª–∏ —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç'
    task = await Task.objects.select_related('performer')\
                             .aget(number=task_number)
    if task.performer:
        logger.info('–ù–∞ –∑–∞–¥–∞—á—É –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–Ω–∂–µ–Ω–µ—Ä')
        return
    senior_engineers_group = await Group.objects.aget(name='–í–µ–¥—É—â–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã')
    senior_engineers = await sync_to_async(list)(
        Employee.objects.filter(
            groups=senior_engineers_group,
        )
    )
    logger.debug('senior_engineers: %s', senior_engineers)
    if not senior_engineers:
        logger.error('–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –≤–µ–¥—É—â–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã')
        return
    await send_schedulers_notify(bot, senior_engineers, notify)


async def check_task_deadline(bot: Bot, task_number: str):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ %s —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞', task_number)
    notify = 'üÜò–ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –∑–∞ –¥–≤–∞ —á–∞—Å–∞'
    task = await Task.objects.select_related('performer')\
                             .aget(number=task_number)
    if not task.performer:
        logger.warning(
            '–ü—Ä–æ—à–ª–æ –¥–≤–∞ —á–∞—Å–∞, –∞ –Ω–∞ –∑–∞–¥–∞—á–µ %s –Ω–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞',
            task_number,
        )
        return
    if task.finish_at:
        logger.debug('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        return
    engineer = task.performer
    managers = sync_to_async(list)(engineer.managers.all())
    await send_schedulers_notify(bot, managers, notify)


async def check_end_of_shift(bot: Bot, shift_id: int):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø–æ—Å–ª–µ 9 —á–∞—Å–æ–≤')
    shift = await WorkShift.objects.select_related('employee')\
                                   .aget(id=shift_id)
    engineer = shift.employee
    notify = f'üî¥ –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {engineer.name} –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞ —Å–ø—É—Å—Ç—è 9 —á–∞—Å–æ–≤'
    if shift.shift_end_at:
        logger.debug(
            '–°–º–µ–Ω–∞ %s —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %s, –∑–∞–∫—Ä—ã—Ç–∞ –≤ %s',
            shift.id,
            engineer.name,
            shift.shift_end_at.strftime('%d-%m-%Y %H:%M:%S'),
        )
        return
    logger.warning(
        '–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %s –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞ %s',
        engineer.name,
        shift.id,
    )
    logger.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º')
    managers = await sync_to_async(list)(engineer.managers.all())
    await send_schedulers_notify(bot, managers, notify)
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')


async def send_schedulers_notify(
        bot: Bot,
        employees: list[Employee],
        message: str,
):
    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞')
    if not employees:
        logger.warning('–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
        return
    for employee in employees:
        logger.debug('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è: %s', employee.name)
        await bot.send_message(employee.tg_id, message)
    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
