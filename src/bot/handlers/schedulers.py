import logging

from datetime import timedelta

from asgiref.sync import sync_to_async

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import F
from aiogram import html
from aiogram import types
from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.fsm.state import StatesGroup

from src.models import WorkShift
from src.models import Employee
from src.models import SDTask
from src.bot.utils import send_notify
from src.bot.utils import get_senior_engineers

logger = logging.getLogger('support_bot')
router = Router(name='scheduler_handlers')


class SchedulerJobState(StatesGroup):
    job_choice = State()


@router.message(Command('scheduler_jobs'))
async def get_scheduler_jobs(
        message: types.Message,
        scheduler: AsyncIOScheduler,
):
    jobs = scheduler.get_jobs()
    message_for_send = ['–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ scheduler:\n']
    for job in jobs:
        job_next_run_time = job.next_run_time + timedelta(hours=3)
        job_next_run_time = html.code(
            job_next_run_time.strftime('%d-%m-%Y %H:%M:%S'),
        )
        job_info = f'<b>Job id:</b> {html.code(job.id)}\n' \
                   f'<b>Job next_run_time:</b> {job_next_run_time}\n'
        message_for_send.append(job_info)
    await message.answer('\n'.join(message_for_send))


@router.message(Command('close_scheduler_job'))
async def close_scheduler_job(
        message: types.Message,
        state: FSMContext,
):
    await message.answer('–ö–∞–∫–æ–π job –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å?')
    await state.set_state(SchedulerJobState.job_choice)


@router.message(F.text.startswith('job_'))
async def process_close_scheduler_job(
        message: types.Message,
        scheduler: AsyncIOScheduler,
        state: FSMContext,
):
    scheduler.remove_job(message.text)
    await message.answer(f'Job {message.text} —É–¥–∞–ª–µ–Ω')
    await state.clear()


async def check_task_activate_step_1(task_number: str):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ %s –ø–µ—Ä–≤—ã–µ 10 –º–∏–Ω—É—Ç', task_number)
    notify = f'‚ùó–í–Ω–∏–º–∞–Ω–∏–µ –∑–∞–¥–∞—á—É {task_number} –Ω–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É —Å–ø—É—Å—Ç—è 10 –º–∏–Ω'
    try:
        task = await SDTask.objects.select_related(
            'performer',
            'applicant',
        ).aget(number=task_number)
    except SDTask.DoesNotExist:
        logger.warning('–ó–∞–¥–∞—á–∏ %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î', task_number)
        return

    if task.performer:
        logger.info('–ù–∞ –∑–∞–¥–∞—á—É –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–Ω–∂–µ–Ω–µ—Ä')
        return
    engineers = await Employee.objects.employees_on_work_by_group_name(
        group_name='–ò–Ω–∂–µ–Ω–µ—Ä—ã',
    )
    middle_engineers = await Employee.objects.employees_on_work_by_group_name(
        group_name='–°—Ç–∞—Ä—à–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã',
    )
    senior_engineers = await Employee.objects.employees_on_work_by_group_name(
        group_name='–í–µ–¥—É—â–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã',
    )
    logger.debug('middle_engineers: %s', middle_engineers)
    if not middle_engineers:
        logger.warning('–ù–∞ —Å–º–µ–Ω–µ –Ω–µ—Ç —Å—Ç–∞—Ä—à–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤!')
        notify_for_senior = '‚Äº–ü–µ—Ä–≤–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è,–Ω–∞ —Å–º–µ–Ω–µ –Ω–µ—Ç —Å—Ç–∞—Ä—à–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤!'
        await send_notify(senior_engineers, notify_for_senior)
    await send_notify([*engineers, *middle_engineers], notify)
    await send_notify(
        [task.applicant],
        f'–ù–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É –∑–∞–¥–∞—á—É {task.number} –∑–∞ 10 –º–∏–Ω—É—Ç.\n–°–æ–æ–±—â–∏–ª —Å—Ç–∞—Ä—à–∏–º'
    )


async def check_task_activate_step_2(task_number: str):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ %s —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç', task_number)
    notify = f'‚Äº–ó–∞–¥–∞—á—É {task_number} –Ω–µ –≤–∑—è–ª–∏ —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç'
    task = await SDTask.objects.select_related('applicant', 'performer')\
                               .aget(number=task_number)
    if task.performer:
        logger.info('–ù–∞ –∑–∞–¥–∞—á—É –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–Ω–∂–µ–Ω–µ—Ä')
        return
    senior_engineers = await get_senior_engineers()
    await send_notify(senior_engineers, notify)
    await send_notify(
        [task.applicant],
        f'–ù–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É –∑–∞–¥–∞—á—É {task.number} –∑–∞ 20 –º–∏–Ω—É—Ç.\n'
        f'–°–æ–æ–±—â–∏–ª –í–µ–¥—É—â–∏–º'
        f'\n\n{html.italic("–ò–Ω–∂–µ–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ —Å 8 —É—Ç—Ä–∞")}'
    )


async def check_task_deadline(task_number: str):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ %s —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞', task_number)
    notify = f'üÜò–ó–∞–¥–∞—á–∞ {html.code(task_number)} –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –∑–∞ –¥–≤–∞ —á–∞—Å–∞'
    task = await SDTask.objects.select_related('performer')\
                               .aget(number=task_number)
    senior_engineers = await get_senior_engineers()
    if not task.performer:
        logger.warning(
            '–ü—Ä–æ—à–ª–æ –¥–≤–∞ —á–∞—Å–∞, –∞ –Ω–∞ –∑–∞–¥–∞—á–µ %s –Ω–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞',
            task_number,
        )
        notify = f'üß®–ü—Ä–æ—à–ª–æ –¥–≤–∞ —á–∞—Å–∞, –∞ –Ω–∞ –∑–∞–¥–∞—á–µ {task_number} –Ω–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞!'
        await send_notify(senior_engineers, notify)
        return
    if task.finish_at:
        logger.debug('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        return
    engineer = task.performer
    managers = await sync_to_async(list)(engineer.managers.all())
    recipients_notification = [*managers, *senior_engineers]
    recipients_notification = list(set(recipients_notification))
    logger.debug('recipients_notification: %s', recipients_notification)
    await send_notify(recipients_notification, notify)


async def check_end_of_shift(shift_id: int):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø–æ—Å–ª–µ 9 —á–∞—Å–æ–≤')
    shift = await WorkShift.objects.select_related('employee')\
                                   .aget(id=shift_id)
    engineer = shift.employee
    notify = f'üî¥ –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {engineer.name} –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞ —Å–ø—É—Å—Ç—è 9 —á–∞—Å–æ–≤'
    if shift.shift_end_at:
        logger.debug(
            '–°–º–µ–Ω–∞ %s —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %s, –∑–∞–∫—Ä—ã—Ç–∞ –≤ %s',
            shift.id,
            engineer.name,
            shift.shift_end_at.strftime('%d-%m-%Y %H:%M:%S'),
        )
        return
    logger.warning(
        '–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %s –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞ %s',
        engineer.name,
        shift.id,
    )
    logger.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º')
    managers = await sync_to_async(list)(engineer.managers.all())
    logger.debug('managers: %s', managers)
    await send_notify(managers, notify)
    logger.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∂–µ–Ω–µ—Ä—É')
    notify_to_engineer = 'üî¥ –ü—Ä–æ—à–ª–æ 9 —á–∞—Å–æ–≤, –∞ —É —Ç–µ–±—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞.\n\n' \
                         '–î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /end_shift'
    await send_notify([engineer], notify_to_engineer)
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
