import logging

from aiogram import html

from src.models import SDTask
from src.models import WorkShift
from src.entities.User import User
from src.entities.Message import Message
from src.entities.SupportEngineer import SupportEngineer
from src.bot.services import get_group_managers_by_support_group

logger = logging.getLogger('support_bot_tasks')


async def check_task_activate_step_1(task_number: str):
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ %s –ø–µ—Ä–≤—ã–µ 10 –º–∏–Ω—É—Ç', task_number)
    notify = f'‚ùó–í–Ω–∏–º–∞–Ω–∏–µ –∑–∞–¥–∞—á—É {task_number} –Ω–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É —Å–ø—É—Å—Ç—è 10 –º–∏–Ω'
    try:
        task = await SDTask.objects.by_number(task_number)
    except SDTask.DoesNotExist:
        logger.warning('–ó–∞–¥–∞—á–∏ %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î', task_number)
        return

    if task.new_performer:
        logger.info('–ù–∞ –∑–∞–¥–∞—á—É –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–Ω–∂–µ–Ω–µ—Ä')
        return

    managers = await get_group_managers_by_support_group(task.support_group)
    await Message.send_tg_notification(
        managers,
        notify,
    )
    await Message.send_tg_notification(
        [User(task.new_applicant)],
        f'–ù–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É –∑–∞–¥–∞—á—É {task.number} –∑–∞ 10 –º–∏–Ω—É—Ç.\n'
        f'–°–æ–æ–±—â–∏–ª —Å—Ç–∞—Ä—à–∏–º',
    )


async def check_task_activate_step_2(task_number: str):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ %s —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç', task_number)
    notify = f'‚Äº–ó–∞–¥–∞—á—É {task_number} –Ω–µ –≤–∑—è–ª–∏ —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç'
    task = await SDTask.objects.by_number(task_number)
    if task.new_performer:
        logger.info('–ù–∞ –∑–∞–¥–∞—á—É –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–Ω–∂–µ–Ω–µ—Ä')
        return
    await Message.send_notify_to_seniors_engineers(notify)
    await Message.send_tg_notification(
        [User(task.new_applicant)],
        f'–ù–µ –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É –∑–∞–¥–∞—á—É {task.number} –∑–∞ 20 –º–∏–Ω—É—Ç.\n'
        f'–°–æ–æ–±—â–∏–ª –í–µ–¥—É—â–∏–º'
        f'\n\n{html.italic("–ò–Ω–∂–µ–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ —Å 8 —É—Ç—Ä–∞")}',
    )


async def check_task_deadline(task_number: str):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ %s —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞', task_number)
    notify = f'üÜò–ó–∞–¥–∞—á–∞ {html.code(task_number)} –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –∑–∞ –¥–≤–∞ —á–∞—Å–∞'
    task = await SDTask.objects.by_number(task_number)

    if task.finish_at:
        logger.debug('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        return

    if not task.new_performer:
        logger.info(
            '–ü—Ä–æ—à–ª–æ –¥–≤–∞ —á–∞—Å–∞, –∞ –Ω–∞ –∑–∞–¥–∞—á–µ %s –Ω–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞',
            task_number,
        )
        notify = f'üß®–ü—Ä–æ—à–ª–æ –¥–≤–∞ —á–∞—Å–∞, –∞ –Ω–∞ –∑–∞–¥–∞—á–µ {task_number} –Ω–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞!'
        await Message.send_notify_to_seniors_engineers(notify)
        return
    support_engineer = SupportEngineer(task.new_performer)
    await Message.send_notify_to_group_managers(
        await support_engineer.group_id,
        notify,
    )
    await Message.send_notify_to_seniors_engineers(notify)


async def check_end_of_shift(shift_id: int):
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø–æ—Å–ª–µ 9 —á–∞—Å–æ–≤')
    shift = await WorkShift.objects.select_related(
        'new_employee',
    ).aget(id=shift_id)
    support_engineer = SupportEngineer(shift.new_employee)
    notify = f'üî¥ –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {support_engineer.user.name} ' \
             f'–Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞ —Å–ø—É—Å—Ç—è 9 —á–∞—Å–æ–≤'
    if shift.shift_end_at:
        logger.debug(
            '–°–º–µ–Ω–∞ %s —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %s, –∑–∞–∫—Ä—ã—Ç–∞ –≤ %s',
            shift.id,
            support_engineer.user.name,
            shift.shift_end_at.strftime('%d-%m-%Y %H:%M:%S'),
        )
        return
    logger.debug(
        '–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ %s –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞ %s',
        support_engineer.user.name,
        shift.id,
    )
    await Message.send_notify_to_group_managers(
        await support_engineer.group_id,
        notify,
    )
    await Message.send_tg_notification(
        [support_engineer],
        'üî¥ –ü—Ä–æ—à–ª–æ 9 —á–∞—Å–æ–≤, –∞ —É —Ç–µ–±—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ —Å–º–µ–Ω–∞.\n\n'
        '–î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /end_shift',
    )
    logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
