import logging

from aiogram.types import (
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
)

logger = logging.getLogger('support_bot')


async def get_choice_tr_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    inline_keyboard = [
        [
            InlineKeyboardButton(text='YUM!', callback_data='tr_yum'),
            InlineKeyboardButton(text='IRB', callback_data='tr_irb'),
            InlineKeyboardButton(text='FZ', callback_data='tr_fz'),
        ],
        [
            InlineKeyboardButton(text='–í—Å–µ', callback_data='tr_all'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_choice_rest_sync_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤')
    inline_keyboard = [
        [
            InlineKeyboardButton(text='–ü–æ –°–ø–∏—Å–∫—É', callback_data='rest_list'),
            InlineKeyboardButton(text='–ì—Ä—É–ø–ø—É', callback_data='rest_group'),
            InlineKeyboardButton(text='–í—Å–µ', callback_data='rest_all'),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_choice_rest_owner_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä—ã')
    inline_keyboard = [
        [
            InlineKeyboardButton(text='YUM!', callback_data='rest_yum'),
            InlineKeyboardButton(text='IRB', callback_data='rest_irb'),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_report_keyboard(report_id: int):
    logger.debug('–°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='üìã –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç',
                callback_data=f'report_{report_id}',
            ),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_gsd_task_keyboard(task_id: int):
    logger.debug('–°–æ–∑–¥–∞—é –ö–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–µ GSD')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë –ø–∏—Å—å–º–æ',
                callback_data=f'gsd_task_{task_id}',
            ),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_user_activate_keyboard(user_id: int):
    logger.debug('–°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏  –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='üë§ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å?',
                callback_data=f'activate_{user_id}',
            ),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_shift_management_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–æ–π')
    inline_keyboard = [
        [
            InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å', callback_data='break_start'),
            InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data='break_stop'),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def create_tg_keyboard_markup(
        buttons_text: list,
        buttons_per_row: int = 3,
) -> ReplyKeyboardMarkup:
    keyboard_buttons = [KeyboardButton(text=text) for text in buttons_text]

    rows = [
        keyboard_buttons[i:i + buttons_per_row] for i in
        range(0, len(keyboard_buttons), buttons_per_row)
    ]

    return ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        one_time_keyboard=True
    )


async def get_support_task_keyboard(task_id: int):
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É',
                callback_data=f'stask_{task_id}'
            ),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def assign_task_keyboard(task_id: int):
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞',
                callback_data=f'atask_{task_id}'
            ),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_approved_task_keyboard(task_number: str):
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                callback_data=f'approved_new_task-{task_number}',
            ),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel'),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_task_feedback_keyboard(task_id: int):
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞–¥–∞—á–∏')
    buttons = []
    for button_number in range(1, 6):
        buttons.append(
            InlineKeyboardButton(
                text=str(button_number),
                callback_data=f'rating_{button_number}_{task_id}'
            )
        )
    inline_keyboard = [buttons]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_choice_support_group_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='ü¶π‚Äç‚ôÇ–î–∏—Å–ø–µ—Ç—á–µ—Ä–∞. –ö–æ–º–∞–Ω–¥–∞ HelpD',
                callback_data='dispatcher',
            ),
        ],
        [
            InlineKeyboardButton(text='ü•∑–ò–Ω–∂–µ–Ω–µ—Ä–∞', callback_data='engineer'),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_choice_task_doc_approved_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
    inline_keyboard = [
        [
            InlineKeyboardButton(text='–î–∞', callback_data='doc_apr_yes'),
            InlineKeyboardButton(text='–ù–µ—Ç', callback_data='doc_apr_no'),
        ],
        [
            InlineKeyboardButton(
                text='üõ†–î–æ–ø/–†–µ–º–æ–Ω—Ç—ã',
                callback_data='additional',
            )
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_choice_task_closed_approved_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='–í—Å–µ –≤–µ—Ä–Ω–æ',
                callback_data='apr_close_task',
            ),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_choice_dispatcher_task_closed_keyboard(task_id: int):
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='–î–∞',
                callback_data=f'disp_task_{task_id}',
            ),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_check_docks_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
                callback_data='show_doc_yes',
            ),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_yes_no_cancel_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–∞-–Ω–µ—Ç-–æ—Ç–º–µ–Ω–∞')
    inline_keyboard = [
        [
            InlineKeyboardButton(text='–î–∞', callback_data='uni_yes'),
            InlineKeyboardButton(text='–ù–µ—Ç', callback_data='uni_no'),
        ],
        [
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_sd_task_keyboard(
        task_id: int,
        *,
        short: bool = True,
        assign: bool = False,
):
    logger.debug('–°–æ–∑–¥–∞—é –ö–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–µ SD')
    inline_keyboard = []
    if short:
        inline_keyboard.append([
            InlineKeyboardButton(
                text='üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                callback_data=f'sd_task_{task_id}',
            ),
        ])
    if assign:
        inline_keyboard.append([
            InlineKeyboardButton(
                text='–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞',
                callback_data=f'atask_{task_id}'
            ),
        ])
    if not inline_keyboard:
        return None
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_simpleone_task_keyboard(task_id: int):
    logger.debug('–°–æ–∑–¥–∞—é –ö–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–µ SimpleOne')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                callback_data=f'simpleone_task_{task_id}',
            ),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


async def get_choice_legal_entity_keyboard():
    logger.debug('–°–æ–∑–¥–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —é—Ä –ª–∏—Ü–∞')
    inline_keyboard = [
        [
            InlineKeyboardButton(
                text='IRB+Unirest',
                callback_data='legal_irb',
            ),
        ],
        [
            InlineKeyboardButton(text='Myrest', callback_data='legal_am'),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
