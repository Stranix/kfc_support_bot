import logging

from typing import Any

from django.template.loader import render_to_string

from src.bot import keyboards

logger = logging.getLogger('support_bot')


async def tg_render_message(template: str, context: Any = None) -> str:
    logger.info('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è')
    message: str = render_to_string(template, context)
    message = message.replace('\n', '').replace('<br>', '\n')
    return message


async def required_task_number() -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /close. –ù–∞—á–∞–ª–æ.
    –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–µ—Ö–∞–ª –∏–Ω–∂–µ–Ω–µ—Ä
    """
    context = {'step': 1}
    return await tg_render_message('bot/close.html', context)


async def required_documents() -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /close. –®–∞–≥ –¥–≤–∞.
    –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–æ–≤ –∏ —Ç–µ—Ö –∑–∞–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ –æ—Ç –≤—ã–µ–∑–¥–Ω–æ–≥–æ
    """
    context = {'step': 2}
    return await tg_render_message('bot/close.html', context)


async def wrong_task_number() -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /close. –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏"""
    context = {'wrong_task_number': True}
    return await tg_render_message('bot/errors.html', context)


async def confirmation_received_documents(documents: dict) -> tuple:
    """–ö–æ–º–∞–Ω–¥–∞ /close. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    context = {
        'step': 3,
        'doc_count': len(documents),
        'doc_names': ', '.join(documents.keys()),
    }
    message = await tg_render_message('bot/close.html', context)
    keyboard = await keyboards.get_yes_no_cancel_keyboard()
    return message, keyboard


async def waiting_creating_task() -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /close. –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    context = {'creating_task': True}
    return await tg_render_message('bot/common.html', context)


async def error_no_engineers_on_shift(number: str) -> str:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –Ω–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
    context = {
        'no_engineers_on_shift': True,
        'task_number': number,
    }
    return await tg_render_message('bot/errors.html', context)


async def new_task_notify_for_engineers(
        number: str,
        description: str,
        creator_contact: str,
        support_group: str,
) -> str:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤"""
    context = {
        'created_task_for_engineers': True,
        'task_number': number,
        'task_description': description.replace('\n', '<br>'),
        'user_tg_nick_name': creator_contact,
        'dispatcher': True if support_group == 'DISPATCHER' else False,
    }
    return await tg_render_message('bot/common.html', context)


async def new_task_notify_for_creator(number: str, title: str) -> str:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞"""
    context = {
        'created_task_for_creator': True,
        'task_number': number,
        'task_title': title,
    }
    return await tg_render_message('bot/common.html', context)


async def error_empty_documents() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    context = {'empty_doc': True}
    return await tg_render_message('bot/errors.html', context)


async def support_help_whose_help_is_needed() -> tuple:
    """–ö–æ–º–∞–Ω–¥–∞ /support_help. –í–æ–ø—Ä–æ—Å —á—å—è –ø–æ–º–æ—â—å —Ç—Ä–µ–±—É–µ—Ç—Å—è."""
    message = '–ß—å—è –ø–æ–º–æ—â—å —Ç—Ä–µ–±—É–µ—Ç—Å—è?'
    keyboard = await keyboards.get_choice_support_group_keyboard()
    return message, keyboard


async def request_task_description() -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /support_help. –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ"""
    return '–ù–∞–ø–∏—à–∏, —Å —á–µ–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?'


async def request_task_confirmation(number: str, description: str) -> tuple:
    """–ö–æ–º–∞–Ω–¥–∞ /support_help. –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    context = {
        'task_confirmation': True,
        'task_number': number,
        'task_description': description,
    }
    message = await tg_render_message('bot/support_help.html', context)
    keyboard = await keyboards.get_approved_task_keyboard(number)
    return message, keyboard


async def error_wrong_task_description() -> str:
    """–û—à–∏–±–∫–∞. –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ"""
    context = {'wrong_task_description': True}
    return await tg_render_message('bot/errors.html', context)


async def rating_feedback(number: str) -> str:
    """–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –æ—Ü–µ–Ω–∫—É –∑–∞–¥–∞—á–∏"""
    context = {
        'rating_feedback': True,
        'task_number': number,
    }
    return await tg_render_message('bot/common.html', context)


async def error_task_not_found() -> str:
    """–û—à–∏–±–∫–∞ —á—Ç–æ –Ω–µ –Ω–∞—à–ª–∞—Å—å –∑–∞–¥–∞—á–∞ –≤ –±–∞–∑–µ"""
    return '–ù–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–¥–∞—á–µ'


async def work_shift_exist() -> str:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –°–º–µ–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞"""
    return '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–º–µ–Ω–∞'


async def start_work_shift() -> str:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –°–º–µ–Ω–∞ –ù–∞—á–∞—Ç–∞"""
    return '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á'


async def end_work_shift() -> str:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –°–º–µ–Ω–∞ –ó–∞–∫–æ–Ω—á–µ–Ω–∞"""
    return '–°–º–µ–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ü–æ–∫–∞ üëã'


async def notify_for_engineers_from_dispatcher(
        task_id: int,
        disp_number: str,
        outside_number: str,
        commit: str,
) -> tuple:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ –æ—Ç–±–∏–≤–∫–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
    context = {
        'number': disp_number,
        'outside_number': outside_number,
        'task_commit': commit,
    }
    message = await tg_render_message('bot/notify_disp.html', context)
    keyboard = await keyboards.get_choice_dispatcher_task_closed_keyboard(
        task_id,
    )
    return message, keyboard


async def additional_chat_message(number: str):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –¥–æ–ø —Ä–∞–±–æ—Ç"""
    context = {
        'for_chat': True,
        'number': number,
    }
    return await tg_render_message('bot/additional.html', context)


async def additional_chat_for_creator(
        task_id: str,
        number: str,
        title: str,
) -> tuple:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–æ–ø —Ä–∞–±–æ—Ç–∞–º –¥–ª—è –≤—ã–µ–∑–¥–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞"""
    context = {
        'for_creator': True,
        'number': number,
        'task_title': title,
    }
    message = await tg_render_message('bot/additional.html', context)
    keyboard = await keyboards.get_task_feedback_keyboard(int(task_id))
    return message, keyboard


async def additional_chat_for_performer() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–æ–ø —Ä–∞–±–æ—Ç–∞–º –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    context = {
        'for_performer': True,
    }
    return await tg_render_message('bot/additional.html', context)


async def new_task_notify_for_middle(task_numbers: list):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ä—à–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤"""
    context = {
        'new_task_for_middle': True,
        'task_numbers': task_numbers,
    }
    return await tg_render_message('bot/common.html', context)


async def engineer_on_shift(name: str) -> str:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ò–Ω–∂–µ–Ω–µ—Ä –Ω–∞ —Å–º–µ–Ω–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    context = {
        'name': name
    }
    return await tg_render_message('bot/on_shift.html', context)


async def engineer_end_shift(name: str) -> str:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ò–Ω–∂–µ–Ω–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    context = {
        'name': name
    }
    return await tg_render_message('bot/end_shift.html', context)


async def start_break_message() -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /break_start. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    return '‚è∞–í–∞—à –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞–ª—Å—è'


async def engineer_start_break(engineer_name: str) -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /break_start. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    context = {
        'start_break': True,
        'name': engineer_name,
    }
    return await tg_render_message('bot/breaks_shift.html', context)


async def stop_break_message() -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /break_stop. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    return '‚è∞–í–∞—à –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω'


async def engineer_stop_break(engineer_name: str) -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /break_stop. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    context = {
        'end_break': True,
        'name': engineer_name,
    }
    return await tg_render_message('bot/breaks_shift.html', context)


async def error_no_active_shift() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã"""
    context = {
        'no_active_shift': True,
    }
    return await tg_render_message('bot/errors.html', context)


async def error_no_active_breaks() -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤"""
    context = {
        'no_active_breaks': True,
    }
    return await tg_render_message('bot/errors.html', context)


async def error_active_break_exist() -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /break_start. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: –ø–µ—Ä–µ—Ä—ã–≤ —É–∂–µ –Ω–∞—á–∞—Ç"""
    return '–ï—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤.\n–ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.'


async def error_active_break_not_exist() -> str:
    """–ö–æ–º–∞–Ω–¥–∞ /break_stop. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞"""
    return '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ ü§∑‚Äç‚ôÇ'
